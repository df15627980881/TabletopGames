package guide;

import core.AbstractPlayer;
import core.Game;
import games.GameType;
import guide.auto.GameContext;
import org.apache.curator.shaded.com.google.common.collect.Lists;
import players.simple.RandomPlayer;

import javax.swing.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Tutorial module startup class
 */
public class GuideGenerator {
    private static final String gameType = "Blackjack";

    private final Map<String, List<AbstractPlayer>> gameTypeAndPlayers = new HashMap<>() {{
        RandomPlayer player1 = new RandomPlayer();
        RandomPlayer player2 = new RandomPlayer();
        RandomPlayer player3 = new RandomPlayer();
        RandomPlayer player4 = new RandomPlayer();
        RandomPlayer player5 = new RandomPlayer();
        put(GameType.Blackjack.name(), Lists.newArrayList(player1, player2, player3, player4, player5));
        put(GameType.LoveLetter.name(), Lists.newArrayList(player1, player2, player3));
    }};

    public static void main(String[] args) throws InterruptedException {
        // add -ea parameter in args before you want to use assert
        // Don't delete this.
        GameContext gameContext = new GameContext(GameType.valueOf(gameType));
        // Here We can automatically find matches
//        AutoGenerateDeck.generate(Lists.newArrayList(new MCTSPlayer(), new MCTSPlayer(), new MCTSPlayer(), new MCTSPlayer()), String.valueOf(BlackjackGameStrategy.BlackjackStrategyEnum.GAME_RESULT.getName()));
//        AutoGenerateDeck.generate(Lists.newArrayList(new MCTSPlayer(), new MCTSPlayer(), new MCTSPlayer()), String.valueOf(BlackjackGameStrategy.BlackjackStrategyEnum.SIMULATE.getName()), GameType.valueOf(gameType));
//        AutoGenerateDeck.generate(Lists.newArrayList(new MCTSPlayer(), new MCTSPlayer(), new MCTSPlayer()), String.valueOf(LoveLetterGameStrategy.LoveLetterStrategyEnum.MECHANISM.getName()), GameType.valueOf(gameType));
//        AutoGenerateDeck.generate(Lists.newArrayList(new MCTSPlayer(), new MCTSPlayer(), new MCTSPlayer()), String.valueOf(LoveLetterGameStrategy.LoveLetterStrategyEnum.GAME_RESULT.getName()), GameType.valueOf(gameType));
//        AutoGenerateDeck.generate(Lists.newArrayList(new MCTSPlayer(), new MCTSPlayer(), new MCTSPlayer()), String.valueOf(LoveLetterGameStrategy.LoveLetterStrategyEnum.SIMULATE.getName()), GameType.valueOf(gameType));
//        System.out.println("finish generation");
        GuideGenerator guideGenerator = new GuideGenerator();

        ArrayList<AbstractPlayer> players = new ArrayList<>(guideGenerator.gameTypeAndPlayers.get(gameType));
        long ss = System.currentTimeMillis();
        Game newGame = Game.runOne(GameType.valueOf(gameType), null, players, ss, false, null, null, 1);
//        guideGenerator.resultAndActionSequencesMap.forEach((k, v) -> System.out.printf("%-15s : %s%n", k, v));
        SwingUtilities.invokeLater(() -> new InterfaceTech(ss, newGame).display());

    }
}